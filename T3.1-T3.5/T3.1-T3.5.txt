Following time: 2h

[0/2] 1. Why this code does not compile [+1]? Suggest your solution [+1].

namespace TReflection
{

template <typename T>
struct TType
{
    template <typename PropertyType>
    TType* Property(PropertyType T::* property) { return this; }

    template <typename ReturnType, typename... ArgumentTypes>
    TType* Function(ReturnType (T::*)(ArgumentTypes...)) { return this; }

    template <typename C>
    TType* Parent() { return *this; }
};

} // namespace reflection

#define REFLECTABLE(...) struct _t { \
    using type = __VA_ARGS__; \
    _t() { TReflection::TType<type>()

#define PROPERTY(...) ->Property(&type::__VA_ARGS__)
#define FUNCTION(...) ->Function(&type::__VA_ARGS__)
#define PARENT(...) ->Parent<__VA_ARGS__>()

#define REFLECTABLE_INIT() ;} }; static _t t;

struct TObject {
    void Foo() {}
    int Var = 0;
};

REFLECTABLE(TObject)
    PROPERTY(Var)
    FUNCTION(Foo)
    PARENT(TObject)
REFLECTABLE_INIT()

int main() {
    return 0;
}

[0/3] 2. Improve code base, where user can registry member variables and functions [+1],
find it by name [+1] and use [+1]. Example:

TReflection::TType<TObject>::TProperty::Set("Var", &obj, 123);

int data = 0;
TReflection::TType<TObject>::TProperty::Get("Var", &obj, &data); // data will be 123

TReflection::TType<TObject>::TFunction::Call("Foo", &obj); // will call TObject::Foo